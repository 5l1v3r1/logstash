filter {
  # TEST implementation of parse for collectd
  if [type] == "collectd" {
    if [plugin] {
      mutate {
	rename => { "plugin" => "collectd_plugin" }
      }
    }
    if [plugin_instance] {
      mutate {
	rename => { "plugin_instance" => "collectd_plugin_instance" }
      }
    }
    if [type_instance] {
      mutate {
	rename => { "type_instance" => "collectd_type_instance" }
      }
    }
    if [value] {
      mutate {
	rename => { "value" => "collectd_value" }
      }
      mutate {
	convert => { "collectd_value" => "float" }
      }
    }
    if [collectd_plugin] == "interface" {
      mutate {
	add_field => {
	  "collectd_value_instance" => "rx"
	  "collectd_value" => "%{rx}"
	}
      }
      mutate {
	convert => {
	  "tx" => "float"
	  "collectd_value" => "float"
	}
      }
      # force clone for kibana3
      clone {
	clones => [ "tx" ]
      }
      ##### BUG EXISTS : AFTER clone 'if [type] == "foo"' NOT WORKING : ruby code is working #####
      ruby {
	code => "
	  if event['type'] == 'tx'
	     event['collectd_value_instance'] = 'tx'
	     event['collectd_value'] = event['tx']
          end
        "
      }
      mutate {
	replace => { "_type" => "collectd" }
	replace => { "type" => "collectd" }
	remove_field => [ "rx", "tx" ]
      }
    }
    if [collectd_plugin] == "disk" {
      mutate {
	add_field => {
	  "collectd_value_instance" => "read"
	  "collectd_value" => "%{read}"
	}
      }
      mutate {
	convert => {
	  "write" => "float"
	  "collectd_value" => "float"
	}
      }
      # force clone for kibana3
      clone {
	clones => [ "write" ]
      }
      ##### BUG EXISTS : AFTER clone 'if [type] == "foo"' NOT WORKING : ruby code is working #####
      ruby {
	code => "
	  if event['type'] == 'write'
	     event['collectd_value_instance'] = 'write'
	     event['collectd_value'] = event['write']
          end
        "
      }
      mutate {
	replace => { "_type" => "collectd" }
	replace => { "type" => "collectd" }
	remove_field => [ "read", "write" ]
      }
    }
    if [collectd_plugin] == "df" {
      mutate {
	add_field => {
	  "collectd_value_instance" => "free"
	  "collectd_value" => "%{free}"
	}
      }
      mutate {
	convert => {
	  "used" => "float"
	  "collectd_value" => "float"
	}
      }
      # force clone for kibana3
      clone {
	clones => [ "used" ]
      }
      ##### BUG EXISTS : AFTER clone 'if [type] == "foo"' NOT WORKING : ruby code is working  #####
      ruby {
	code => "
	  if event['type'] == 'used'
	     event['collectd_value_instance'] = 'used'
	     event['collectd_value'] = event['used']
          end
        "
      }
      mutate {
	replace => { "_type" => "collectd" }
	replace => { "type" => "collectd" }
	remove_field => [ "used", "free" ]
      }
    }
    if [collectd_plugin] == "load" {
      mutate {
	add_field => {
	  "collectd_value_instance" => "shortterm"
	  "collectd_value" => "%{shortterm}"
	}
      }
      mutate {
	convert => {
	  "longterm" => "float"
	  "midterm" => "float"
	  "collectd_value" => "float"
	}
      }
      # force clone for kibana3
      clone {
	clones => [ "longterm", "midterm" ]
      }
      ##### BUG EXISTS : AFTER clone 'if [type] == "foo"' NOT WORKING : ruby code is working #####
      ruby {
	code => "
	  if event['type'] != 'collectd'
	    event['collectd_value_instance'] = event['type']
	    event['collectd_value'] = event[event['type']]
	  end
        "
      }
      mutate {
	replace => { "_type" => "collectd" }
	replace => { "type" => "collectd" }
	remove_field => [ "longterm", "midterm", "shortterm" ]
      }
    }
  }
}
