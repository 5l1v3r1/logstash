input {
  redis {
    host => "127.0.0.1"
    data_type => "list"
    key => "logstash"
    codec => json
  }
}

filter {
  if [type] == "syslog" {
    ### "$RepeatedMsgReduction off" /etc/rsyslog.conf
    #if [message] =~ /last message repeated [0-9]+ times/ {
    #  drop { }
    #}
    ## enable high precision timestamps
    # comment out $ActionFileDefaultTemplate RSYSLOG_TraditionalFileFormat
    grok {
      match => { "message" => "(?:%{SYSLOGTIMESTAMP:syslog_timestamp}|%{TIMESTAMP_ISO8601:syslog_timestamp}) %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid:int}\])?: %{GREEDYDATA:syslog_message}" }
      add_field => {
        "syslog_received_at" => "%{@timestamp}"
        "syslog_received_from" => "%{host}"
      }
    }
    syslog_pri {
    }
    date {
      match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss", "ISO8601" ]
      timezone => "Asia/Tokyo"
      locale => "en"
    }
    mutate {
      replace => { "syslog_timestamp" => "%{@timestamp}" }
    }

    # postfix details
    if [syslog_program] =~ /^postfix.*\/smtpd$/ {
      grok {
        patterns_dir => "/etc/logstash/patterns"
        match => { "syslog_message" => "%{POSTFIX_SMTPD}" }
      }
    } else if [syslog_program] == "postfix/smtp"
           or [syslog_program] == "postfix/lmtp"
           or [syslog_program] == "postfix/local" {
      grok {
        patterns_dir => "/etc/logstash/patterns"
        match => { "syslog_message" => "%{POSTFIX_SMTP}" }
      }
    } else if [syslog_program] == "postfix/bounce" {
      grok {
        patterns_dir => "/etc/logstash/patterns"
        match => { "syslog_message" => "%{POSTFIX_BOUNCE}" }
      }
    } else if [syslog_program] == "postfix/qmgr" {
      grok {
        patterns_dir => "/etc/logstash/patterns"
        match => { "syslog_message" => "%{POSTFIX_QMGR}" }
      }
    } else if [syslog_program] == "postfix/anvil" {
      grok {
        patterns_dir => "/etc/logstash/patterns"
        match => { "syslog_message" => "%{POSTFIX_ANVIL}" }
      }
    } else if [syslog_program] == "postfix/cleanup" {
      grok {
        patterns_dir => "/etc/logstash/patterns"
        match => { "syslog_message" => "%{POSTFIX_CLEANUP}" }
      }
    } else if [syslog_program] == "postfix/dnsblog" {
      grok {
        patterns_dir => "/etc/logstash/patterns"
        match => { "syslog_message" => "%{POSTFIX_DNSBLOG}" }
      }
    } else if [syslog_program] == "postfix/master" {
      grok {
        patterns_dir => "/etc/logstash/patterns"
        match => { "syslog_message" => "%{POSTFIX_MASTER}" }
      }
    } else if [syslog_program] == "postfix/pickup" {
      grok {
        patterns_dir => "/etc/logstash/patterns"
        match => { "syslog_message" => "%{POSTFIX_PICKUP}" }
      }
    } else if [syslog_program] == "postfix/pipe" {
      grok {
        patterns_dir => "/etc/logstash/patterns"
        match => { "syslog_message" => "%{POSTFIX_PIPE}" }
      }
    } else if [syslog_program] == "postfix/postdrop" {
      grok {
        patterns_dir => "/etc/logstash/patterns"
        match => { "syslog_message" => "%{POSTFIX_POSTDROP}" }
      }
    } else if [syslog_program] == "postfix/postscreen" {
      grok {
        patterns_dir => "/etc/logstash/patterns"
        match => { "syslog_message" => "%{POSTFIX_POSTSCREEN}" }
      }
    } else if [syslog_program] == "postfix/sendmail" {
      grok {
        patterns_dir => "/etc/logstash/patterns"
        match => { "syslog_message" => "%{POSTFIX_SENDMAIL}" }
      }
    } else if [syslog_program] == "postfix/tlsmgr" {
      grok {
        patterns_dir => "/etc/logstash/patterns"
        match => { "syslog_message" => "%{POSTFIX_TLSMGR}" }
      }
    } else if [syslog_program] == "postfix/tlsproxy" {
      grok {
        patterns_dir => "/etc/logstash/patterns"
        match => { "syslog_message" => "%{POSTFIX_TLSPROXY}" }
      }
    } else if [syslog_program] == "postfix/trivial-rewrite" {
      grok {
        patterns_dir => "/etc/logstash/patterns"
        match => { "syslog_message" => "%{POSTFIX_TRIVIAL_REWRITE}" }
      }
    }

    if [syslog_program] =~ /^postfix.*\// {
      mutate {
        replace => { "type" => "postfix" }
      }
      # process key-value data is it exists
      if [postfix_keyvalue_data] {
        kv {
          source => "postfix_keyvalue_data"
          include_keys => [ "act", "addr", "class", "client", "conn_use", "delay", "delays", "delim", "depth", "dest", "dest_label", "dest_prop", "domain", "dsn", "dsn_orig", "dsn_ret", "encoding", "endp", "endp_label", "endp_prop", "envid", "family", "fd", "features", "filter", "flags", "from", "func", "helo", "host", "id", "ident", "key", "map", "message-id", "name", "notif", "nrcpt", "num", "off", "orig_id", "orig_to", "pattern", "port", "probed", "prop", "proto", "queue", "rcpt", "realm", "reply", "resent-message-id", "relay", "result", "ret", "score", "sender", "server_flags", "service", "size", "sock", "stat", "status", "stream", "subject", "table", "text", "to", "transp", "uid", "updated", "used", "val", "value", "verify", "weight", "why" ]
          trim => "<>,"
          prefix => "postfix_"
          remove_field => [ "postfix_keyvalue_data" ]
        }
        # some post processing of key-value data
        if [postfix_client] {
          grok {
            patterns_dir => "/etc/logstash/patterns"
            match => { "postfix_client" => "%{POSTFIX_CLIENT_INFO}" }
            tag_on_failure => [ "_grok_kv_postfix_client_nomatch" ]
            remove_field => [ "postfix_client" ]
          }
        }
        if [postfix_relay] {
          grok {
            patterns_dir => "/etc/logstash/patterns"
            match => { "postfix_relay" => "%{POSTFIX_RELAY_INFO}" }
            tag_on_failure => [ "_grok_kv_postfix_relay_nomatch" ]
            remove_field => [ "postfix_relay" ]
          }
        }
        if [postfix_delays] {
          grok {
            patterns_dir => "/etc/logstash/patterns"
            match => { "postfix_delays" => "%{POSTFIX_DELAYS}" }
            tag_on_failure => [ "_grok_kv_postfix_delays_nomatch" ]
            remove_field => [ "postfix_delays" ]
          }
        }
        if [postfix_from] == "" {
          mutate {
            replace => { "postfix_from" => "NULL" }
          }
        }
      }
      # Do some key-value data type conversions
      mutate {
        convert => {
          "postfix_nrcpt" => "integer"
          "postfix_size" => "integer"
          "postfix_uid" => "integer"
          "postfix_delay" => "float"
        }
      }
      if [postfix_client_ip] and [postfix_client_ip] != "unknown" {
        geoip {
          database => "/etc/logstash/geoip/GeoLiteCity.dat"
          source => "postfix_client_ip"
          target => "postfix_geoip"
        }
        # AWS us-east-1 : Virginia
        if [postfix_client_ip] =~ /^10\./ {
          mutate { replace      => { "[postfix_geoip][timezone]"         => "America/New_York" } }
          mutate { replace      => { "[postfix_geoip][country_name]"     => "United States" } }
          mutate { replace      => { "[postfix_geoip][country_code2]"    => "US" } }
          mutate { replace      => { "[postfix_geoip][country_code3]"    => "USA" } }
          mutate { replace      => { "[postfix_geoip][area_code]"        => "703" } }
          mutate { convert      => { "[postfix_geoip][area_code]"        => "float" } }
          mutate { replace      => { "[postfix_geoip][city_name]"        => "Ashburn" } }
          mutate { replace      => { "[postfix_geoip][continent_code]"   => "NA" } }
          mutate { replace      => { "[postfix_geoip][dma_code]"         => "511" } }
          mutate { convert      => { "[postfix_geoip][dma_code]"         => "float" } }
          mutate { replace      => { "[postfix_geoip][ip]"               => "%{postfix_client_ip}" } }
          mutate { replace      => { "[postfix_geoip][postal_code]"      => "20147" } }
          mutate { replace      => { "[postfix_geoip][real_region_name]" => "Virginia" } }
          mutate { replace      => { "[postfix_geoip][region_name]"      => "VA" } }
          mutate { remove_field => [ "[postfix_geoip][location]" ] }
          mutate { add_field    => { "[postfix_geoip][location]"         => "-77.4875" } }
          mutate { add_field    => { "[postfix_geoip][location]"         => "39.044" } }
          mutate { convert      => { "[postfix_geoip][location]"         => "float" } }
          mutate { replace      => { "[postfix_geoip][latitude]"         => "39.044" } }
          mutate { convert      => { "[postfix_geoip][latitude]"         => "float" } }
          mutate { replace      => { "[postfix_geoip][longitude]"        => "-77.4875" } }
          mutate { convert      => { "[postfix_geoip][longitude]"        => "float" } }
        }
      }
    }

    if [syslog_program] == "sshd" {
      grok {
        patterns_dir => "/etc/logstash/patterns"
        match => { "syslog_message" => "%{SSHD_LOG}" }
      }
      if [sshd_client_ip] and [sshd_client_ip] != "unknown" {
        geoip {
          database => "/etc/logstash/geoip/GeoLiteCity.dat"
          source => "sshd_client_ip"
          target => "sshd_geoip"
        }
        # AWS us-east-1 : Virginia
        if [sshd_client_ip] =~ /^10\./ {
          mutate { replace      => { "[sshd_geoip][timezone]"         => "America/New_York" } }
          mutate { replace      => { "[sshd_geoip][country_name]"     => "United States" } }
          mutate { replace      => { "[sshd_geoip][country_code2]"    => "US" } }
          mutate { replace      => { "[sshd_geoip][country_code3]"    => "USA" } }
          mutate { replace      => { "[sshd_geoip][area_code]"        => "703" } }
          mutate { convert      => { "[sshd_geoip][area_code]"        => "float" } }
          mutate { replace      => { "[sshd_geoip][city_name]"        => "Ashburn" } }
          mutate { replace      => { "[sshd_geoip][continent_code]"   => "NA" } }
          mutate { replace      => { "[sshd_geoip][dma_code]"         => "511" } }
          mutate { convert      => { "[sshd_geoip][dma_code]"         => "float" } }
          mutate { replace      => { "[sshd_geoip][ip]"               => "%{sshd_client_ip}" } }
          mutate { replace      => { "[sshd_geoip][postal_code]"      => "20147" } }
          mutate { replace      => { "[sshd_geoip][real_region_name]" => "Virginia" } }
          mutate { replace      => { "[sshd_geoip][region_name]"      => "VA" } }
          mutate { remove_field => [ "[sshd_geoip][location]" ] }
          mutate { add_field    => { "[sshd_geoip][location]"         => "-77.4875" } }
          mutate { add_field    => { "[sshd_geoip][location]"         => "39.044" } }
          mutate { convert      => { "[sshd_geoip][location]"         => "float" } }
          mutate { replace      => { "[sshd_geoip][latitude]"         => "39.044" } }
          mutate { convert      => { "[sshd_geoip][latitude]"         => "float" } }
          mutate { replace      => { "[sshd_geoip][longitude]"        => "-77.4875" } }
          mutate { convert      => { "[sshd_geoip][longitude]"        => "float" } }
        }
        if ![sshd_client_hostname] {
          mutate {
            add_field => { "sshd_client_hostname" => "%{sshd_client_ip}" }
          }
          dns {
            reverse => [ "sshd_client_hostname" ]
            action => "replace"
          }
        }
      }
    }

    # auth.log
    if [syslog_program] == "saslauthd" {
      grok {
        patterns_dir => "/etc/logstash/patterns"
        match => { "syslog_message" => "%{SASLAUTHD}" }
      }
    }
  }

  if [type] == "apache" or [type] == "apache-other-vhost" or [type] == "varnish" {
    if [type] == "apache-other-vhost" {
      grok {
        patterns_dir => "/etc/logstash/patterns"
        match => { "message" => "%{APACHE_OTHER_VHOST_EXT}" }
      }
    } else {
      grok {
        patterns_dir => "/etc/logstash/patterns"
        match => { "message" => "%{APACHE_EXT_COMBINED}" }
      }
    }
    date {
      match => [ "apache_timestamp", "dd/MMM/yyyy:HH:mm:ss Z" ]
      timezone => "Asia/Tokyo"
      locale => "en"
    }
    mutate {
      replace => { "apache_timestamp" => "%{@timestamp}" }
    }
    if [apache_client_ip] and [apache_client_ip] != "unknown" {
      geoip {
        database => "/etc/logstash/geoip/GeoLiteCity.dat"
        source => "apache_client_ip"
        target => "apache_geoip"
      }
      # AWS us-east-1 : Virginia
      if [apache_client_ip] =~ /^10\./ {
        mutate { replace      => { "[apache_geoip][timezone]"         => "America/New_York" } }
        mutate { replace      => { "[apache_geoip][country_name]"     => "United States" } }
        mutate { replace      => { "[apache_geoip][country_code2]"    => "US" } }
        mutate { replace      => { "[apache_geoip][country_code3]"    => "USA" } }
        mutate { replace      => { "[apache_geoip][area_code]"        => "703" } }
        mutate { convert      => { "[apache_geoip][area_code]"        => "float" } }
        mutate { replace      => { "[apache_geoip][city_name]"        => "Ashburn" } }
        mutate { replace      => { "[apache_geoip][continent_code]"   => "NA" } }
        mutate { replace      => { "[apache_geoip][dma_code]"         => "511" } }
        mutate { convert      => { "[apache_geoip][dma_code]"         => "float" } }
        mutate { replace      => { "[apache_geoip][ip]"               => "%{apache_client_ip}" } }
        mutate { replace      => { "[apache_geoip][postal_code]"      => "20147" } }
        mutate { replace      => { "[apache_geoip][real_region_name]" => "Virginia" } }
        mutate { replace      => { "[apache_geoip][region_name]"      => "VA" } }
        mutate { remove_field => [ "[apache_geoip][location]" ] }
        mutate { add_field    => { "[apache_geoip][location]"         => "-77.4875" } }
        mutate { add_field    => { "[apache_geoip][location]"         => "39.044" } }
        mutate { convert      => { "[apache_geoip][location]"         => "float" } }
        mutate { replace      => { "[apache_geoip][latitude]"         => "39.044" } }
        mutate { convert      => { "[apache_geoip][latitude]"         => "float" } }
        mutate { replace      => { "[apache_geoip][longitude]"        => "-77.4875" } }
        mutate { convert      => { "[apache_geoip][longitude]"        => "float" } }
      }
      mutate {
        add_field => { "apache_client_hostname" => "%{apache_client_ip}" }
      }
      dns {
        reverse => [ "apache_client_hostname" ]
        action => "replace"
      }
    }
    if [apache_agent] {
      useragent {
        source => "apache_agent"
        target => "apache_useragent"
        regexes => "/etc/logstash/regexes.yaml"
      }
      ruby {
        code => "
          bot_hash = {
            'libwww\-perl'                      => 'libwww-perl',
            'Wget'                              => 'Wget',
            '^\"\-\"$'                          => 'MINUS',
            'Feedbin'                           => 'Feedbin',
            'Googlebot'                         => 'Googlebot',
            'AhrefsBot'                         => 'AhrefsBot',
            'bingbot'                           => 'bingbot',
            'FreshReader'                       => 'FreshReader',
            '360Spider'                         => '360Spider',
            'Windows\-RSS\-Platform'            => 'Windows-RSS-Platform',
            'Baiduspider'                       => 'Baiduspider',
            'Feedeen'                           => 'Feedeen',
            'Tiny\ Tiny\ RSS'                   => 'Tiny_Tiny_RSS',
            'Feedly'                            => 'Feedly',
            'WordPress'                         => 'WordPress',
            'linkdexbot'                        => 'linkdexbot',
            'Yahoo'                             => 'Yahoo',
            'SemrushBot'                        => 'SemrushBot',
            'Bumble\ Bee'                       => 'Bumble_Bee',
            'Mail\.RU_Bot'                      => 'Mail.RU_Bot',
            'BLEXBot'                           => 'BLEXBot',
            'everrss'                           => 'everrss',
            'MJ12bot'                           => 'MJ12bot',
            'Media\ Center\ PC'                 => 'Media_Center_PC',
            'TurnitinBot'                       => 'TurnitinBot',
            'livedoor\ FeedFetcher'             => 'livedoor_FeedFetcher',
            'DotBot'                            => 'DotBot',
            'Superfeedr\ bot'                   => 'Superfeedr_bot',
            '^\"robots\"$'                      => 'robots',
            'Digg\ Feed\ Fetcher'               => 'Digg_Feed_Fetcher',
            'python\-requests'                  => 'python-requests',
            'Y!J\-'                             => 'Yahoo!_Japan_Bot',
            'Google\ favicon'                   => 'Google_favicon',
            'NerdyBot'                          => 'NerdyBot',
            'spbot'                             => 'spbot',
            'Yandex'                            => 'Yandex',
            'magpie\-crawler'                   => 'magpie-crawler',
            'meanpathbot'                       => 'meanpathbot',
            'com\.apple\.Safari\.SearchHelper'  => 'com.apple.Safari.SearchHelper',
            'AlexaToolbar'                      => 'AlexaToolbar',
            '^\"iPhone\"$'                      => 'iPhone_Fake_google',
            'SurveyBot'                         => 'SurveyBot',
            'com\.apple\.WebKit\.WebContent'    => 'com.apple.WebKit.WebContent',
            'curl'                              => 'curl',
            'Nutch'                             => 'Nutch',
            'archive\.org_bot'                  => 'archive.org_bot',
            'BingPreview'                       => 'BingPreview',
            'Steeler'                           => 'Steeler',
            'Python\-urllib'                    => 'Python-urllib',
            'CCBot'                             => 'CCBot',
            'Sage\+\+'                          => 'Sage++',
            'user_agent'                        => 'Program_Miss',
            'special_archiver'                  => 'special_archiver',
            'Cloud\ mapping\ experiment'        => 'Cloud_mapping_experiment',
            'Exabot'                            => 'Exabot',
            'SiteExplorer'                      => 'SiteExplorer',
            'Twitterbot'                        => 'Twitterbot',
            'Lipperhey\-Kaus\-Australis'        => 'Lipperhey-Kaus-Australis',
            'x00_\-gawa\.sa\.pilipinas'         => 'x00_-gawa.sa.pilipinas',
            'DuckDuckGo\-Favicons\-Bot'         => 'DuckDuckGo-Favicons-Bot',
            'ips\-agent'                        => 'ips-agent',
            'RSSingBot'                         => 'RSSingBot',
            'Daumoa'                            => 'Daumoa',
            'Synapse'                           => 'Synapse',
            'ia_archiver'                       => 'ia_archiver',
            'aiHitBot'                          => 'aiHitBot',
            'BDCbot'                            => 'BDCbot',
            'CRAZYWEBCRAWLER'                   => 'CRAZYWEBCRAWLER',
            'FlipboardRSS'                      => 'FlipboardRSS',
            'HTTP_Request2'                     => 'HTTP_Request2',
            '^\"\"$'                            => 'NULL',
            '^\"Mozilla\"$'                     => 'Mozilla_Fake_google',
            '^\"Mozilla/\d\.\d\"$'              => 'Mozilla_Fake_CN',
            '^\"\"Mozilla'                      => 'Mis_Mozilla',
            '^\"=Mozilla'                       => 'Miss_Mozilla',
            '^\"Hatena'                         => 'Hatena',
            'Java'                              => 'Java',
            'CakePHP'                           => 'CakePHP',
            '^\"PHP'                            => 'PHP',
            'WinHttp\.WinHttpRequest'           => 'WinHttp.WinHttpRequest',
            'Jakarta\ Commons\-HttpClient'      => 'Jakarta_Commons-HttpClient',
            'Google\-Site\-Verification'        => 'Google-Site-Verification',
            'GoogleImageProxy'                  => 'GoogleImageProxy',
            'AppEngine\-Google'                 => 'AppEngine-Google',
            'Slackbot\-LinkExpanding'           => 'Slackbot-LinkExpanding',
            'MS\ Search\ \d\.\d\ Robot'         => 'MS_Search_Robot',
            'Acidbot3'                          => 'Acidbot3',
            'AdnormCrawler'                     => 'AdnormCrawler',
            'Applebot'                          => 'Applebot',
            'BCKLINKS'                          => 'BCKLINKS',
            'BOT\ for\ JCE'                     => 'BOT_for_JCE',
            'BlackCrawler'                      => 'BlackCrawler',
            'Blekkobot'                         => 'Blekkobot',
            'BoardReader\ Blog\ Indexer'        => 'BoardReader_Blog_Indexer',
            'BusinessBot'                       => 'BusinessBot',
            'CMS\ Crawler'                      => 'CMS_Crawler',
            'Claritybot'                        => 'Claritybot',
            'DialogSearch\.com\ Bot'            => 'DialogSearch.com_Bot',
            'Digincore\ bot'                    => 'Digincore_bot',
            'DomainSigmaCrawler'                => 'DomainSigmaCrawler',
            'ENVCheck'                          => 'ENVCheck_envc.dip.jp',
            'Embedly'                           => 'Embedly',
            'Feedspot'                          => 'Feedspot',
            'Findxbot'                          => 'Findxbot',
            'GOFORITBOT'                        => 'GOFORITBOT',
            'GarlikCrawler'                     => 'GarlikCrawler',
            'GetURLInfo'                        => 'GetURLInfo',
            'GigablastOpenSource'               => 'GigablastOpenSource',
            'GimmeUSAbot'                       => 'GimmeUSAbot',
            'Go\ \d\.\d\ package\ http'         => 'Go_package_http',
            'Hatena\ Pagetitle\ Agent'          => 'Hatena_Pagetitle_Agent',
            'Hatena\ Star\ UserAgent'           => 'Hatena_Star_UserAgent',
            'HeartRails_Capture'                => 'HeartRails_Capture',
            'Hivemind'                          => 'Hivemind',
            'HubSpot\ Links\ Crawler'           => 'HubSpot_Links_Crawler',
            'HyperCrawl'                        => 'HyperCrawl',
            'ICC\-Crawler'                      => 'ICC-Crawler',
            'Indy\ Library'                     => 'Indy_Library',
            'InetURL'                           => 'InetURL',
            'Internet\-wide\-scan\-to\-be\-removed\-from\-this\-list\-email\-info\-at\-binaryedge\.io' => 'binaryedge',
            'Kyoto\-Crawler'                    => 'Kyoto-Crawler',
            'Kyoto\-Tohoku\-Crawler'            => 'Kyoto-Tohoku-Crawler',
            'LSSRocketCrawler'                  => 'LSSRocketCrawler',
            'LinkWalker'                        => 'LinkWalker',
            'MegaIndex\.ru'                     => 'MegaIndex.ru',
            'Microsearch\.ru\ Bot'              => 'Microsearch.ru_Bot',
            'MixrankBot'                        => 'MixrankBot',
            'Mnogosearch'                       => 'Mnogosearch',
            'MojeekBot'                         => 'MojeekBot',
            'Morfeus\ Fucking\ Scanner'         => 'Morfeus_Fucking_Scanner',
            'Morfeus\ strikes\ again'           => 'Morfeus_strikes_again',
            'NetSeer\ crawler'                  => 'NetSeer_crawler',
            'NetcraftSurveyAgent'               => 'NetcraftSurveyAgent',
            'Netcraft\ Web\ Server\ Survey'     => 'Netcraft_Web_Server_Survey',
            'Newsify'                           => 'Newsify',
            'PageAnalyzer'                      => 'PageAnalyzer',
            'PagesInventory'                    => 'PagesInventory',
            'PiplBot'                           => 'PiplBot',
            'Qwantify'                          => 'Qwantify',
            'R6_CommentReader'                  => 'R6_CommentReader',
            'R6_FeedFetcher'                    => 'R6_FeedFetcher',
            'Readability'                       => 'Readability',
            'SEOkicks\-Robot'                   => 'SEOkicks-Robot',
            'SMTBot'                            => 'SMTBot',
            'Scanning\ for\ research'           => 'researchscan',
            'Scopia\ Crawler'                   => 'Scopia_Crawler',
            'ScoutJet'                          => 'ScoutJet',
            'Scrapy'                            => 'Scrapy',
            'Screaming\ Frog\ SEO\ Spider'      => 'Screaming_Frog_SEO_Spider',
            'SeznamBot'                         => 'SeznamBot',
            'ShortLinkTranslate'                => 'ShortLinkTranslate',
            'SlideGur'                          => 'SlideGur',
            'Sogou\ web\ spider'                => 'Sogou_web_spider',
            'SputnikBot'                        => 'SputnikBot',
            'Stratagems\ Kumo'                  => 'Stratagems_Kumo',
            'Telesphoreo'                       => 'Telesphoreo',
            'Telesphorep'                       => 'Telesphorep',
            'TopServer\ PHP'                    => 'TopServer_PHP',
            'Unknown\/X-Agent'                  => 'Unknown_X-Agent',
            'WBSearchBot'                       => 'WBSearchBot',
            'WWWC'                              => 'WWWC',
            'WWW\-Mechanize'                    => 'WWW-Mechanize',
            'WebIndex'                          => 'WebIndex',
            'WebTarantula\.com'                 => 'WebTarantula.com',
            'Wotbox'                            => 'Wotbox',
            'Xenu\ Link\ Sleuth'                => 'Xenu_Link_Sleuth',
            'XoviBot'                           => 'XoviBot',
            'YisouSpider'                       => 'YisouSpider',
            'Zend_Http_Client'                  => 'Zend_Http_Client',
            'ZmEu'                              => 'ZmEu',
            'Zollard'                           => 'Linux.Trojan.Zollard',
            'alsRobot2'                         => 'alsRobot2',
            'bot\-pge\.chlooe\.com'             => 'bot-pge.chlooe.com',
            'crawler4j'                         => 'crawler4j',
            'facebookexternalhit'               => 'facebookexternalhit',
            'finbot'                            => 'finbot',
            'heritrix'                          => 'heritrix',
            'iZSearch\.com'                     => 'iZSearch.com',
            'ichiro'                            => 'goo',
            'izsearch\.com'                     => 'izsearch.com',
            'linkapediabot'                     => 'linkapediabot',
            'ltx71'                             => 'ltx71',
            'masscan'                           => 'masscan',
            'mobile\ goo'                       => 'mobile_goo',
            'moukrest\.ru'                      => 'moukrest.ru',
            'msnbot'                            => 'msnbot',
            'netEstate\ NE\ Crawler'            => 'netEstate_NE_Crawler',
            'nlpproject\.info\ research'        => 'nlpproject.info_research',
            'oBot'                              => 'oBot',
            'ocrawler'                          => 'ocrawler',
            'panscient\.com'                    => 'panscient.com',
            'probethenet\.com\ scanner'         => 'probethenet.com_scanner',
            'psbot'                             => 'psbot',
            'rogerbot'                          => 'rogerbot',
            'scrutiny'                          => 'scrutiny',
            'voltron'                           => 'voltron',
            'wp\-poster'                        => 'wp-poster',
            'yacybot'                           => 'yacybot',
            'zgrab'                             => 'zgrab'
          }
          bot_hash.each do |bot_re, bot_name|
            if event['apache_agent'] =~ /#{bot_re}/
              event['apache_robot'] = bot_name
              break
            end
          end
        "
      }
    }
    if [apache_request] {
      ruby {
        code => "event['apache_extension'] = File.extname(event['apache_request'].split('?')[0]).delete('.')"
      }
      if [apache_extension] == "" or [apache_extension] !~ /^[a-zA-Z0-9]{1,4}$/ {
        mutate {
          remove_field => [ "apache_extension" ]
        }
      }
    }
  }

  if [type] == "apache-error" {
    grok {
      patterns_dir => "/etc/logstash/patterns"
      match => { "message" => "%{APACHE_ERROR}" }
    }
    date {
      match => [ "apache_error_timestamp", "EEE MMM dd HH:mm:ss yyyy" ]
      timezone => "Asia/Tokyo"
      locale => "en"
    }
    mutate {
      replace => { "apache_error_timestamp" => "%{@timestamp}" }
    }
    if [apache_error_client_ip] and [apache_error_client_ip] != "unknown" {
      geoip {
        database => "/etc/logstash/geoip/GeoLiteCity.dat"
        source => "apache_error_client_ip"
        target => "apache_error_geoip"
      }
      # AWS us-east-1 : Virginia
      if [apache_error_client_ip] =~ /^10\./ {
        mutate { replace      => { "[apache_error_geoip][timezone]"         => "America/New_York" } }
        mutate { replace      => { "[apache_error_geoip][country_name]"     => "United States" } }
        mutate { replace      => { "[apache_error_geoip][country_code2]"    => "US" } }
        mutate { replace      => { "[apache_error_geoip][country_code3]"    => "USA" } }
        mutate { replace      => { "[apache_error_geoip][area_code]"        => "703" } }
        mutate { convert      => { "[apache_error_geoip][area_code]"        => "float" } }
        mutate { replace      => { "[apache_error_geoip][city_name]"        => "Ashburn" } }
        mutate { replace      => { "[apache_error_geoip][continent_code]"   => "NA" } }
        mutate { replace      => { "[apache_error_geoip][dma_code]"         => "511" } }
        mutate { convert      => { "[apache_error_geoip][dma_code]"         => "float" } }
        mutate { replace      => { "[apache_error_geoip][ip]"               => "%{apache_error_client_ip}" } }
        mutate { replace      => { "[apache_error_geoip][postal_code]"      => "20147" } }
        mutate { replace      => { "[apache_error_geoip][real_region_name]" => "Virginia" } }
        mutate { replace      => { "[apache_error_geoip][region_name]"      => "VA" } }
        mutate { remove_field => [ "[apache_error_geoip][location]" ] }
        mutate { add_field    => { "[apache_error_geoip][location]"         => "-77.4875" } }
        mutate { add_field    => { "[apache_error_geoip][location]"         => "39.044" } }
        mutate { convert      => { "[apache_error_geoip][location]"         => "float" } }
        mutate { replace      => { "[apache_error_geoip][latitude]"         => "39.044" } }
        mutate { convert      => { "[apache_error_geoip][latitude]"         => "float" } }
        mutate { replace      => { "[apache_error_geoip][longitude]"        => "-77.4875" } }
        mutate { convert      => { "[apache_error_geoip][longitude]"        => "float" } }
      }
      mutate {
        add_field => { "apache_error_client_hostname" => "%{apache_error_client_ip}" }
      }
      dns {
        reverse => [ "apache_error_client_hostname" ]
        action => "replace"
      }
    }
  }

  if [type] == "dpkg" {
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:dpkg_timestamp} %{GREEDYDATA:dpkg_message}" }
    }
    date {
      match => [ "dpkg_timestamp", "YYYY-MM-dd HH:mm:ss", "ISO8601" ]
      timezone => "Asia/Tokyo"
      locale => "en"
    }
    mutate {
      replace => { "dpkg_timestamp" => "%{@timestamp}" }
    }
  }

  # zimbra mailbox.log
  if [type] == "zimbra" {
    grok {
      patterns_dir => "/etc/logstash/patterns"
      match => { "message" => "%{ZIMBRA_MAILBOX_LOG}" }
    }
    date {
      match => [ "zimbra_timestamp", "YYYY-MM-dd HH:mm:ss,SSS", "ISO8601" ]
      timezone => "Asia/Tokyo"
      locale => "en"
    }
    mutate {
      replace => { "zimbra_timestamp" => "%{@timestamp}" }
    }
    if [zimbra_account] {
      kv {
        source => "zimbra_account"
        include_keys => [ "ip", "oip", "id", "name", "aid", "aname", "cid", "mid", "ua", "via", "msgid", "item", "ds", "port" ]
        field_split => ";"
        prefix => "zimbra_account_"
        remove_field => [ "zimbra_account" ]
      }
      mutate {
        convert => {
          "zimbra_account_id" => "integer"
          "zimbra_account_aid" => "integer"
          "zimbra_account_cid" => "integer"
          "zimbra_account_mid" => "integer"
          "zimbra_account_port" => "integer"
        }
      }
    }
    if [zimbra_account_ip] {
      geoip {
        database => "/etc/logstash/geoip/GeoLiteCity.dat"
        source => "zimbra_account_ip"
        target => "zimbra_geoip"
      }
      # AWS us-east-1 : Virginia
      if [zimbra_account_ip] =~ /^10\./ {
        mutate { replace      => { "[zimbra_geoip][timezone]"         => "America/New_York" } }
        mutate { replace      => { "[zimbra_geoip][country_name]"     => "United States" } }
        mutate { replace      => { "[zimbra_geoip][country_code2]"    => "US" } }
        mutate { replace      => { "[zimbra_geoip][country_code3]"    => "USA" } }
        mutate { replace      => { "[zimbra_geoip][area_code]"        => "703" } }
        mutate { convert      => { "[zimbra_geoip][area_code]"        => "float" } }
        mutate { replace      => { "[zimbra_geoip][city_name]"        => "Ashburn" } }
        mutate { replace      => { "[zimbra_geoip][continent_code]"   => "NA" } }
        mutate { replace      => { "[zimbra_geoip][dma_code]"         => "511" } }
        mutate { convert      => { "[zimbra_geoip][dma_code]"         => "float" } }
        mutate { replace      => { "[zimbra_geoip][ip]"               => "%{zimbra_account_ip}" } }
        mutate { replace      => { "[zimbra_geoip][postal_code]"      => "20147" } }
        mutate { replace      => { "[zimbra_geoip][real_region_name]" => "Virginia" } }
        mutate { replace      => { "[zimbra_geoip][region_name]"      => "VA" } }
        mutate { remove_field => [ "[zimbra_geoip][location]" ] }
        mutate { add_field    => { "[zimbra_geoip][location]"         => "-77.4875" } }
        mutate { add_field    => { "[zimbra_geoip][location]"         => "39.044" } }
        mutate { convert      => { "[zimbra_geoip][location]"         => "float" } }
        mutate { replace      => { "[zimbra_geoip][latitude]"         => "39.044" } }
        mutate { convert      => { "[zimbra_geoip][latitude]"         => "float" } }
        mutate { replace      => { "[zimbra_geoip][longitude]"        => "-77.4875" } }
        mutate { convert      => { "[zimbra_geoip][longitude]"        => "float" } }
      }
      mutate {
        add_field => { "zimbra_account_hostname" => "%{zimbra_account_ip}" }
      }
      dns {
        reverse => [ "zimbra_account_hostname" ]
        action => "replace"
      }
    }
    if [zimbra_account_oip] {
      geoip {
        database => "/etc/logstash/geoip/GeoLiteCity.dat"
        source => "zimbra_account_oip"
        target => "zimbra_origin_geoip"
      }
      # AWS us-east-1 : Virginia
      if [zimbra_account_oip] =~ /^10\./ {
        mutate { replace      => { "[zimbra_origin_geoip][timezone]"         => "America/New_York" } }
        mutate { replace      => { "[zimbra_origin_geoip][country_name]"     => "United States" } }
        mutate { replace      => { "[zimbra_origin_geoip][country_code2]"    => "US" } }
        mutate { replace      => { "[zimbra_origin_geoip][country_code3]"    => "USA" } }
        mutate { replace      => { "[zimbra_origin_geoip][area_code]"        => "703" } }
        mutate { convert      => { "[zimbra_origin_geoip][area_code]"        => "float" } }
        mutate { replace      => { "[zimbra_origin_geoip][city_name]"        => "Ashburn" } }
        mutate { replace      => { "[zimbra_origin_geoip][continent_code]"   => "NA" } }
        mutate { replace      => { "[zimbra_origin_geoip][dma_code]"         => "511" } }
        mutate { convert      => { "[zimbra_origin_geoip][dma_code]"         => "float" } }
        mutate { replace      => { "[zimbra_origin_geoip][ip]"               => "%{zimbra_account_oip}" } }
        mutate { replace      => { "[zimbra_origin_geoip][postal_code]"      => "20147" } }
        mutate { replace      => { "[zimbra_origin_geoip][real_region_name]" => "Virginia" } }
        mutate { replace      => { "[zimbra_origin_geoip][region_name]"      => "VA" } }
        mutate { remove_field => [ "[zimbra_origin_geoip][location]" ] }
        mutate { add_field    => { "[zimbra_origin_geoip][location]"         => "-77.4875" } }
        mutate { add_field    => { "[zimbra_origin_geoip][location]"         => "39.044" } }
        mutate { convert      => { "[zimbra_origin_geoip][location]"         => "float" } }
        mutate { replace      => { "[zimbra_origin_geoip][latitude]"         => "39.044" } }
        mutate { convert      => { "[zimbra_origin_geoip][latitude]"         => "float" } }
        mutate { replace      => { "[zimbra_origin_geoip][longitude]"        => "-77.4875" } }
        mutate { convert      => { "[zimbra_origin_geoip][longitude]"        => "float" } }
      }
      mutate {
        add_field => { "zimbra_account_origin_hostname" => "%{zimbra_account_oip}" }
      }
      dns {
        reverse => [ "zimbra_account_origin_hostname" ]
        action => "replace"
      }
    }
    if [zimbra_trace_log] {
      mutate {
        add_field => { "zimbra_component" => "JAVA-Exception" }
      }
    }
  }

  # zimbra /var/log/zimbra.log (syslog format) use amavisd, clamd, opendkim logs only.
  if [type] == "zimbralog" {
    grok {
      match => { "message" => "(?:%{SYSLOGTIMESTAMP:syslog_timestamp}|%{TIMESTAMP_ISO8601:syslog_timestamp}) %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid:int}\])?: %{GREEDYDATA:syslog_message}" }
      add_field => {
        "syslog_received_at" => "%{@timestamp}"
        "syslog_received_from" => "%{host}"
      }
    }
    syslog_pri {
    }
    date {
      match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss", "ISO8601" ]
      timezone => "Asia/Tokyo"
      locale => "en"
    }
    mutate {
      replace => { "syslog_timestamp" => "%{@timestamp}" }
    }
    if [syslog_program] == "amavis" {
      grok {
        patterns_dir => "/etc/logstash/patterns"
        match => { "syslog_message" => "%{AMAVIS}" }
      }
      mutate {
        replace => { "type" => "amavis" }
      }
      if [amavis_relay_ip] {
        geoip {
          database => "/etc/logstash/geoip/GeoLiteCity.dat"
          source => "amavis_relay_ip"
          target => "amavis_geoip"
        }
        # AWS us-east-1 : Virginia
        if [amavis_relay_ip] =~ /^10\./ {
          mutate { replace      => { "[amavis_geoip][timezone]"         => "America/New_York" } }
          mutate { replace      => { "[amavis_geoip][country_name]"     => "United States" } }
          mutate { replace      => { "[amavis_geoip][country_code2]"    => "US" } }
          mutate { replace      => { "[amavis_geoip][country_code3]"    => "USA" } }
          mutate { replace      => { "[amavis_geoip][area_code]"        => "703" } }
          mutate { convert      => { "[amavis_geoip][area_code]"        => "float" } }
          mutate { replace      => { "[amavis_geoip][city_name]"        => "Ashburn" } }
          mutate { replace      => { "[amavis_geoip][continent_code]"   => "NA" } }
          mutate { replace      => { "[amavis_geoip][dma_code]"         => "511" } }
          mutate { convert      => { "[amavis_geoip][dma_code]"         => "float" } }
          mutate { replace      => { "[amavis_geoip][ip]"               => "%{amavis_relay_ip}" } }
          mutate { replace      => { "[amavis_geoip][postal_code]"      => "20147" } }
          mutate { replace      => { "[amavis_geoip][real_region_name]" => "Virginia" } }
          mutate { replace      => { "[amavis_geoip][region_name]"      => "VA" } }
          mutate { remove_field => [ "[amavis_geoip][location]" ] }
          mutate { add_field    => { "[amavis_geoip][location]"         => "-77.4875" } }
          mutate { add_field    => { "[amavis_geoip][location]"         => "39.044" } }
          mutate { convert      => { "[amavis_geoip][location]"         => "float" } }
          mutate { replace      => { "[amavis_geoip][latitude]"         => "39.044" } }
          mutate { convert      => { "[amavis_geoip][latitude]"         => "float" } }
          mutate { replace      => { "[amavis_geoip][longitude]"        => "-77.4875" } }
          mutate { convert      => { "[amavis_geoip][longitude]"        => "float" } }
        }
        mutate {
          add_field => { "amavis_relay_hostname" => "%{amavis_relay_ip}" }
        }
        dns {
          reverse => [ "amavis_relay_hostname" ]
          action => "replace"
        }
      }
    } else if [syslog_program] == "clamd" {
      mutate {
        replace => { "type" => "clamd" }
      }
    } else if [syslog_program] == "opendkim" {
      mutate {
        replace => { "type" => "opendkim" }
      }
    } else {
      drop {
      }
    }
  }

  # TEST implementation of parse for sysdig
  # https://gist.github.com/jordansissel/5f260954e95085294096
  # ex. # sysdig -t a "not(proc.name = sysdig)" | /opt/logstash/bin/logstash -f /etc/logstash/conf.d/sysdig-shipper.conf
  if [type] == "sysdig" {
    # With absolute time via `sysdig -t a`
    # <evt.num> <evt.time> <evt.cpu> <proc.name> <thread.tid> <evt.dir> <evt.type> <evt.args>
    # Example:
    # 22232 1397121223.916379436 0 sysdig (2816) < write res=62 data=3452 1397121223.855286080 0 sysdig (2816) > switch next=1822 .
    grok {
      patterns_dir => "/etc/logstash/patterns"
      match => { "message" => "%{SYSDIG}" }
    }
    date {
      match => [ "sysdig_timestamp", "UNIX" ]
      timezone => "Asia/Tokyo"
      locale => "en"
    }
    mutate {
      replace => { "sysdig_timestamp" => "%{@timestamp}" }
    }
    if [sysdig_kv_args] {
      kv {
        source => "sysdig_kv_args"
        include_keys => [ "addr", "args", "argument", "backlog", "cgroups", "clockid", "cmd", "comm", "cur", "cwd", "data", "dirfd", "domain", "dpid", "dqb_bhardlimit", "dqb_bsoftlimit", "dqb_btime", "dqb_curspace", "dqb_ihardlimit", "dqb_isoftlimit", "dqb_itime", "dqi_bgrace", "dqi_flags", "dqi_igrace", "egid", "env", "euid", "event_data", "event_type", "exe", "fd1", "fd2", "fd_in", "fdlimit", "fd_out", "fd", "fds", "flags", "gid", "how", "id", "ID", "image", "in_fd", "initval", "ino", "interval", "length", "linkdirfd", "linkpath", "mask", "maxevents", "max", "mode", "name", "nativeID", "newcur", "newdirfd", "newdir", "newmax", "newpath", "next", "offset", "oldcur", "olddirfd", "olddir", "oldmax", "oldpath", "op", "out_fd", "path", "peer", "pgft_maj", "pgft_min", "pgoffset", "pid", "pos", "proto", "prot", "ptid", "queuepct", "quotafilepath", "quota_fmt_out", "quota_fmt", "ratio", "request", "resource", "res", "rgid", "ruid", "sgid", "sig", "size", "source", "special", "spid", "status", "suid", "target", "tid", "timeout", "tuple", "type", "uid", "val", "vm_rss", "vm_size", "vm_swap", "vpid", "vtid", "whence" ]
        prefix => "sysdig_"
        #remove_field => [ "sysdig_kv_args" ]
      }
      mutate {
        convert => {
          "sysdig_clockid" => "integer"
          "sysdig_queuepct" => "integer"
          "sysdig_nativeID" => "integer"
          "sysdig_backlog" => "integer"
          "sysdig_event_type" => "integer"
          "sysdig_proto" => "integer"
          "sysdig_ratio" => "integer"
          "sysdig_vm_rss" => "integer"
          "sysdig_vm_size" => "integer"
          "sysdig_vm_swap" => "integer"
        }
      }
    }
  }
}

output {
  elasticsearch {
    host => "127.0.0.1"
    protocol => "http"
    template => "/etc/logstash/elasticsearch-template.json"
    template_overwrite => true
  }

  # send to Datadog DogStatsD
  if [apache_response] and [type] != "varnish" {
    statsd {
      count => [ "apache.count.bytes", "%{apache_bytes}" ]
      increment => "apache.count.response.%{apache_response}"
      timing => [ "apache.timing.request", "%{apache_responsetime}" ]
    }
    # "apache_response" as long
    if [apache_response] >= 200 and [apache_response] <= 299 {
      statsd { increment => "apache.count.response.2XX" }
    } else if [apache_response] >= 300 and [apache_response] <= 399 {
      statsd { increment => "apache.count.response.3XX" }
    } else if [apache_response] >= 400 and [apache_response] <= 499 {
      statsd { increment => "apache.count.response.4XX" }
    } else if [apache_response] >= 500 and [apache_response] <= 599 {
      statsd { increment => "apache.count.response.5XX" }
    }
  }
}
